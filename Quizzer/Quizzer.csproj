<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <UserSecretsId>ca4b52dd-f4c1-412d-8c1a-225ab66ee3a4</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.App" />
    <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.1.2" PrivateAssets="All" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="2.1.1" />
    <PackageReference Include="QRCoder" Version="1.3.5" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="ClientApp\src\app\client\ClientState.ts" />
    <None Remove="ClientApp\src\app\common\IdTypes.ts" />
    <None Remove="ClientApp\src\app\game\answer.ts" />
    <None Remove="ClientApp\src\app\game\answered-question.ts" />
    <None Remove="ClientApp\src\app\game\game.service.ts" />
    <None Remove="ClientApp\src\app\game\option.ts" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Quizzer.Domain\Quizzer.Domain.fsproj" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\client\ClientState.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\common\IdTypes.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\game\answer.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\game\answered-question.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\common\Option.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\game\game.service.ts" />
  </ItemGroup>

  <ItemGroup>
    <None Update="ClientApp\src\app\client\states\NotEnoughPlayers.ts">
      <CustomToolNamespace>Services\Client\States\NotEnoughPlayers.cs</CustomToolNamespace>
    </None>
    <None Update="ClientApp\src\app\client\states\SingleAnswerQuestion.ts">
      <CustomToolNamespace>Services\Client\States\SingleAnswerQuestion.cs</CustomToolNamespace>
    </None>
    <None Update="ClientApp\src\app\client\states\State.ts">
      <CustomToolNamespace>Services\Client\States\State.cs</CustomToolNamespace>
    </None>
    <None Update="ClientApp\src\app\game\states\ActiveQuestion.ts">
      <CustomToolNamespace>Services\Game\States\ActiveQuestion.cs</CustomToolNamespace>
    </None>
    <None Update="ClientApp\src\app\game\states\MultipleAnswerAnsweredQuestion.ts">
      <CustomToolNamespace>Services\Game\States\MultipleAnswerAnsweredQuestion.cs</CustomToolNamespace>
    </None>
    <None Update="ClientApp\src\app\game\states\NotEnoughPlayers.ts">
      <CustomToolNamespace>Services\Game\States\NotEnoughPlayers.cs</CustomToolNamespace>
    </None>
    <None Update="ClientApp\src\app\game\states\SingleAnswerAnsweredQuestion.ts">
      <CustomToolNamespace>Services\Game\States\SingleAnswerAnsweredQuestion.cs</CustomToolNamespace>
    </None>
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <TypeScriptTarget>ES5</TypeScriptTarget>
    <TypeScriptJSXEmit>None</TypeScriptJSXEmit>
    <TypeScriptModuleKind>AMD</TypeScriptModuleKind>
    <TypeScriptCompileOnSaveEnabled>True</TypeScriptCompileOnSaveEnabled>
    <TypeScriptNoImplicitAny>False</TypeScriptNoImplicitAny>
    <TypeScriptRemoveComments>False</TypeScriptRemoveComments>
    <TypeScriptOutFile />
    <TypeScriptOutDir />
    <TypeScriptGeneratesDeclarations>False</TypeScriptGeneratesDeclarations>
    <TypeScriptNoEmitOnError>True</TypeScriptNoEmitOnError>
    <TypeScriptSourceMap>True</TypeScriptSourceMap>
    <TypeScriptMapRoot />
    <TypeScriptSourceRoot />
  </PropertyGroup>

</Project>
